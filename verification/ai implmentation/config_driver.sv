//% this code generated by Ai "github cobilot" ^-^
class config_driver;
    // Declare a virtual interface .
    virtual config_space_if vif;
    // Declare a mailbox for config_transaction objects.
    mailbox #(config_transaction)  mb_drv_gen;
    // Declare an event to signal when the driver is done.
    event driver_done;
    // Declare a config_transaction object to hold the current transaction.
    config_transaction cfg_trans;

    // The constructor for the config_driver class.
    function new(mailbox #(config_transaction) mb_drv_gen, virtual config_space_if vif,event driver_done);
        this.mb_drv_gen = mb_drv_gen;
        this.vif = vif;
        this.driver_done = driver_done;
    endfunction : new


    // This task runs forever, continuously getting config_transaction objects from the mailbox
    // and assigning their values to the corresponding signals in the config_space_if interface.
    task run();
        forever begin
            mb_drv_gen.get(cfg_trans);
            vif.lane_disable  <= cfg_trans.lane_disable;
            vif.c_data_in       <= cfg_trans.c_data_in;
            
            // Trigger the driver_done event.
            ->driver_done;          //* note that : generator should out first transaction without waiting for any event
            $display("[config driver] done");
        end
    endtask : run

endclass : config_driver