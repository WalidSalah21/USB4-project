//% this code generated by Ai "github cobilot" ^-^
class config_monitor;

    // Interface to the config space
     virtual config_space_if cfg_if;

    // Transaction object
    config_transaction cfg_trans;

    // Mailbox for sending transactions
    mailbox #(config_transaction) cfg_mbox;

    // Constructor
    function new(virtual config_space_if cfg_if, mailbox #(config_transaction) cfg_mbox);
        this.cfg_if = cfg_if;
        this.cfg_mbox = cfg_mbox;
    endfunction

    // Task to monitor the config space interface and send transactions
    task run();
        forever begin
            cfg_trans = new();
            // Wait for the negative edge of the gen_speed signal
           @(negedge cfg_if.gen4_fsm_clk);    //* in our design we work with gen4 only here

            // Update the transaction object with the current values from the interface
            cfg_trans.c_read        = cfg_if.c_read;
            cfg_trans.c_write       = cfg_if.c_write;
            cfg_trans.c_address  = cfg_if.c_address;
            cfg_trans.c_data_out = cfg_if.c_data_out;

            // If a read or write operation is in progress, send the transaction to the mailbox
            if (cfg_trans.c_read || cfg_trans.c_write) begin
                cfg_mbox.put(cfg_trans);
                $display("[Config monitor] received at time (%0t) data of : %p", $time, cfg_trans);
            end
        end
    endtask

    // Task to wait for the negative edge of a specific clock
    /*task wait_for_negedge(input GEN gen_speed);
        case (gen_speed)
            gen2: @(negedge cfg_if.gen2_fsm_clk);
            gen3: @(negedge cfg_if.gen3_fsm_clk);
            gen4: @(negedge cfg_if.gen4_fsm_clk);
        endcase
    endtask*/

endclass